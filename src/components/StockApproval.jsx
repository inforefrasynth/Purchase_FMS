"use client"

import { useState, useEffect, useMemo, useCallback } from "react"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { toast } from "sonner"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Checkbox } from "@/components/ui/checkbox"
import { Label } from "@/components/ui/label"
import { MixerHorizontalIcon } from "@radix-ui/react-icons"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Filter, CheckCircle2, History, Shield, Loader2, AlertTriangle, Info } from "lucide-react"
import { useAuth } from "../context/AuthContext"

// Helper function to parse "DD/MM/YYYY HH:MM:SS" timestamps
const parseCustomTimestamp = (timestampString) => {
  if (!timestampString || typeof timestampString !== "string") return null
  const parts = timestampString.match(/(\d{2})\/(\d{2})\/(\d{4})\s(\d{2}):(\d{2}):(\d{2})/)
  if (!parts) {
    const d = new Date(timestampString)
    if (!isNaN(d.getTime())) return d
    return null
  }
  return parts
    ? new Date(
        parts[3],
        Number.parseInt(parts[2], 10) - 1,
        Number.parseInt(parts[1], 10),
        Number.parseInt(parts[4], 10),
        Number.parseInt(parts[5], 10),
        Number.parseInt(parts[6], 10),
      )
    : null
}

// Function to format Google Sheets date values
const formatSheetDate = (dateValue) => {
  if (!dateValue || typeof dateValue !== "string") return dateValue || "-"
  // Handle Google Sheets Date(YYYY,MM,DD,HH,MM,SS) format
  const gvizMatch = dateValue.match(/^Date$$(\d+),(\d+),(\d+)(?:,(\d+),(\d+),(\d+))?$$/)
  if (gvizMatch) {
    const [, year, month, day, hours, minutes, seconds] = gvizMatch.map(Number)
    const parsedDate = new Date(year, month, day, hours || 0, minutes || 0, seconds || 0)
    if (!isNaN(parsedDate.getTime())) {
      return new Intl.DateTimeFormat("en-GB", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        hour12: false,
      }).format(parsedDate)
    }
  }
  return dateValue
}

// Helper function to clean remarks - extract only the user text
const cleanRemark = (remark) => {
  if (!remark || typeof remark !== "string") return ""

  // Remove timestamp patterns like "(Approved: 21/07/2025 19:09:38)" or "[21/07/2025 19:09:38]"
  const cleaned = remark
    .replace(/\s*\([^)]*:\s*\d{2}\/\d{2}\/\d{4}[^)]*\)\s*$/i, "") // Remove "(Status: timestamp)"
    .replace(/\s*\[[^\]]+\]\s*$/, "") // Remove "[timestamp]"
    .trim()

  return cleaned
}

// Map friendly headers to their corresponding 'colX' keys from Google Sheets
const FRIENDLY_HEADER_TO_DATA_KEY_MAP = {
  "Rl-Indent No.": "col1",
  "Delivery Order No.": "col9",
  "Generated By": "col3",
  "Vendor Name": "col4",
  "Raw Material Name": "col5",
  Quantity: "col6",
  "Type Of Indent": "col8",
  "Current Stock As Per factory": "col7",
  Notes: "col10",
  "Planned 1": "col11",
}

export default function StockApproval() {
  const [indents, setIndents] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [refreshData, setRefreshData] = useState(false)
  const [selectedRows, setSelectedRows] = useState({})
  const [remarks, setRemarks] = useState({})
  const [approvedQtys, setApprovedQtys] = useState({})
  const [approvalStatuses, setApprovalStatuses] = useState({})
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [activeTab, setActiveTab] = useState("approve")
  const { user, allowedSteps } = useAuth()

  // --- Column Visibility States ---
  const [visibleApproveColumns, setVisibleApproveColumns] = useState({})
  const [visibleHistoryColumns, setVisibleHistoryColumns] = useState({})

  // --- Filter States ---
  const [filters, setFilters] = useState({
    vendorName: "all",
    rawMaterialName: "all",
    typeOfIndent: "all",
    generatedBy: "all",
    deliveryOrderNo: "all",
  })

  // Dynamic column metadata derived from sheet headers
  const [allColumnsMeta, setAllColumnsMeta] = useState([])

  // Google Sheet Details
  const sheetId = "1NUxf4pnQ-CtCFUjA5rqLgYEJiU77wQlwVyimjt8RmFQ"
  const sheetName = "INDENT-PO"
  // FIX: The offset to convert the GVIZ API row index to the absolute sheet row number.
  // This is corrected from 7 to 5 because the API response includes two extra rows from the top of the sheet before the main headers.
  const dataStartRow = 6
  const scriptUrl =
    "https://script.google.com/macros/s/AKfycbzj9zlZTEhdlmaMt78Qy3kpkz7aOfVKVBRuJkd3wv_UERNrIRCaepSULpNa7W1g-pw/exec"

  // --- Fetch Data and Initialize Column Meta/Visibility ---
  useEffect(() => {
    const fetchIndentsData = async () => {
      setLoading(true)
      setError(null)
      try {
        const url = `https://docs.google.com/spreadsheets/d/${sheetId}/gviz/tq?tqx=out:json&sheet=${encodeURIComponent(
          sheetName,
        )}&cb=${new Date().getTime()}`
        const response = await fetch(url)
        if (!response.ok) {
          throw new Error(`Failed to fetch data: ${response.status} ${response.statusText}`)
        }
        const text = await response.text()
        const jsonStart = text.indexOf("{")
        const jsonEnd = text.lastIndexOf("}")
        if (jsonStart === -1 || jsonEnd === -1) {
          throw new Error("Invalid response format from Google Sheets")
        }
        const jsonString = text.substring(jsonStart, jsonEnd + 1)
        const data = JSON.parse(jsonString)

        if (!data.table || !data.table.cols || !data.table.rows) {
          setIndents([])
          setLoading(false)
          return
        }

        const sheetHeaders = data.table.cols.map((col, index) => ({
          id: `col${index}`,
          label: col.label || col.id || `Column ${String.fromCharCode(65 + index)}`,
          type: col.type,
        }))

        const generatedAllColumnsMeta = sheetHeaders.map((sheetCol) => {
          const friendlyHeader =
            Object.keys(FRIENDLY_HEADER_TO_DATA_KEY_MAP).find(
              (key) => FRIENDLY_HEADER_TO_DATA_KEY_MAP[key] === sheetCol.id,
            ) || sheetCol.label
          return {
            header: friendlyHeader,
            dataKey: sheetCol.id,
            toggleable: Object.values(FRIENDLY_HEADER_TO_DATA_KEY_MAP).includes(sheetCol.id),
            alwaysVisible: sheetCol.id === "col1",
            isApproveUI: false,
            isHistoryUI: false,
          }
        })

        const approveUiColumns = [
          { header: "Select", dataKey: "selectRow", alwaysVisible: true, isApproveUI: true },
          { header: "What is To Be Done", dataKey: "statusDropdown", isApproveUI: true },
          { header: "Remark", dataKey: "remarkInput", isApproveUI: true },
          { header: "Appr. Qty", dataKey: "approvedQtyInput", isApproveUI: true },
        ]

        const combinedColumnsMeta = [...approveUiColumns, ...generatedAllColumnsMeta]
        setAllColumnsMeta(combinedColumnsMeta)

        const initialApproveVisibility = {}
        const initialHistoryVisibility = {}

        combinedColumnsMeta.forEach((col) => {
          initialApproveVisibility[col.dataKey] =
            col.alwaysVisible ||
            (Object.values(FRIENDLY_HEADER_TO_DATA_KEY_MAP).includes(col.dataKey) && !col.isHistoryUI) ||
            col.isApproveUI
        })
        
        const historyColumnsToShow = [
          "col1", "col15", "col16", "col14", "col12", "col9", "col3", "col4",
          "col5", "col6", "col8", "col7", "col10", "col11"
        ];
        
        historyColumnsToShow.forEach((colKey) => {
          initialHistoryVisibility[colKey] = true
        })

        setVisibleApproveColumns(initialApproveVisibility)
        setVisibleHistoryColumns(initialHistoryVisibility)

        const rowsData = data.table.rows.map((row, rowIndexInSheetData) => {
          const rowObject = {
            _id: `${sheetName}-${rowIndexInSheetData}-${new Date().getTime()}`,
            _rowIndex: rowIndexInSheetData + dataStartRow,
            rawCells: row.c ? row.c.map(cell => (cell ? (cell.f ?? cell.v) : null)) : [],
          }

          sheetHeaders.forEach((header, cellIndex) => {
            const cell = row.c?.[cellIndex]
            const cellValue = cell?.v !== null && cell?.v !== undefined ? String(cell.v) : ""
            rowObject[header.id] = cellValue
            if (cell?.f) {
              rowObject[`${header.id}_formatted`] = cell.f
            }
          })
          return rowObject
        })

        let processedIndents = rowsData.map((row) => ({
          ...row,
          id: (row.col1 || "").trim(),
          timestampOriginal: row.col0_formatted || row.col0 || "",
          firmName: row.col2 || "",
          generatedBy: row.col3 || "",
          vendorName: row.col4 || "",
          rawMaterialName: row.col5 || "",
          quantity: row.col6 || "",
          currentStock: row.col7 || "",
          priority: row.col8 || "",
          deliveryOrderNo: row.col9 || "",
          notes: row.col10 || "",
          columnL_Check: row.col11_formatted || row.col11 || "",
          columnM_Check: row.col12_formatted || row.col12 || "",
          approvedQty_original: row.col14 || "",
          status_original: row.col15 || "",
          remark_original: cleanRemark(row.col16 || ""),
        }))

        if (!allowedSteps.includes("admin") && user?.firmName && user.firmName.toLowerCase() !== "all") {
          const userFirmNameLower = user.firmName.toLowerCase()
          processedIndents = processedIndents.filter(
            (indent) => indent.firmName && String(indent.firmName).toLowerCase() === userFirmNameLower,
          )
        }

        setIndents(processedIndents)

        const initialQtys = {}
        const initialStatuses = {}
        const initialRemarks = {}

        processedIndents.forEach((indent) => {
          initialQtys[indent.id] = indent.approvedQty_original || indent.quantity
          initialStatuses[indent.id] = indent.status_original || "Select"
          initialRemarks[indent.id] = indent.remark_original || ""
        })

        setApprovedQtys(initialQtys)
        setApprovalStatuses(initialStatuses)
        setRemarks(initialRemarks)

      } catch (err) {
        console.error("Error fetching indents data:", err)
        setError("Failed to load indent data: " + err.message)
        toast.error("Failed to load indent data", { description: err.message })
      } finally {
        setLoading(false)
      }
    }

    fetchIndentsData()
  }, [sheetId, sheetName, dataStartRow, refreshData, user, allowedSteps, scriptUrl])

  // Get unique values for filters
  const getUniqueValues = useCallback(
    (field) => {
      const values = indents.map((indent) => indent[field]).filter((value) => value && value.trim() !== "")
      return [...new Set(values)].sort()
    },
    [indents],
  )

  const uniqueValues = useMemo(
    () => ({
      vendorName: getUniqueValues("vendorName"),
      rawMaterialName: getUniqueValues("rawMaterialName"),
      typeOfIndent: getUniqueValues("priority"),
      generatedBy: getUniqueValues("generatedBy"),
      deliveryOrderNo: getUniqueValues("deliveryOrderNo"),
    }),
    [getUniqueValues],
  )

  const handleFilterChange = (field, value) => {
    setFilters((prev) => ({ ...prev, [field]: value }))
  }

  const clearAllFilters = () => {
    setFilters({
      vendorName: "all",
      rawMaterialName: "all",
      typeOfIndent: "all",
      generatedBy: "all",
      deliveryOrderNo: "all",
    })
  }

  // Apply filters to data
  const applyFilters = useCallback(
    (data) => {
      let filtered = [...data]
      if (filters.vendorName !== "all") {
        filtered = filtered.filter((entry) => entry.vendorName === filters.vendorName)
      }
      if (filters.rawMaterialName !== "all") {
        filtered = filtered.filter((entry) => entry.rawMaterialName === filters.rawMaterialName)
      }
      if (filters.typeOfIndent !== "all") {
        filtered = filtered.filter((entry) => entry.priority === filters.typeOfIndent)
      }
      if (filters.generatedBy !== "all") {
        filtered = filtered.filter((entry) => entry.generatedBy === filters.generatedBy)
      }
      if (filters.deliveryOrderNo !== "all") {
        filtered = filtered.filter((entry) => entry.deliveryOrderNo === filters.deliveryOrderNo)
      }
      return filtered
    },
    [filters],
  )

  const handleSelectRow = (id, isSelected) => {
    setSelectedRows((prev) => ({ ...prev, [id]: isSelected }))
  }

  const handleApprovedQtyChange = (id, qty) => {
    setApprovedQtys((prev) => ({ ...prev, [id]: qty }))
  }

  const handleApprovalStatusChange = (id, status) => {
    setApprovalStatuses((prev) => ({ ...prev, [id]: status }))
  }

  const handleRemarkChange = (id, remark) => {
    setRemarks((prev) => ({ ...prev, [id]: remark }))
  }

  // --- Column Visibility Handlers ---
  const handleToggleColumn = (tab, dataKey, checked) => {
    if (tab === "approve") {
      setVisibleApproveColumns((prev) => ({ ...prev, [dataKey]: checked }))
    } else {
      setVisibleHistoryColumns((prev) => ({ ...prev, [dataKey]: checked }))
    }
  }

  const handleSelectAllColumns = (tab, columnsToToggle, checked) => {
    const newVisibility = {}
    columnsToToggle.forEach((col) => {
      newVisibility[col.dataKey] = checked
    })
    if (tab === "approve") {
      setVisibleApproveColumns((prev) => ({ ...prev, ...newVisibility }))
    } else {
      setVisibleHistoryColumns((prev) => ({ ...prev, ...newVisibility }))
    }
  }

  async function handleSubmitSelected(e) {
    if (e) e.preventDefault();

    const selectedIndentIds = Object.keys(selectedRows).filter(id => selectedRows[id]);
    if (selectedIndentIds.length === 0) {
      toast.error("Validation Error", { description: "Please select at least one row to update." });
      return;
    }

    const invalidRows = selectedIndentIds.filter(id => !approvalStatuses[id] || approvalStatuses[id] === "Select");
    if (invalidRows.length > 0) {
      toast.error("Validation Error", { description: "Please select an approval status for all selected rows." });
      return;
    }

    setIsSubmitting(true);
    toast.loading(`Submitting ${selectedIndentIds.length} update(s)...`, { id: "submission-toast" });

    let successCount = 0;
    const errorMessages = [];

    // Use a sequential for...of loop to avoid overwhelming the Apps Script and for clearer error handling
    for (const indentId of selectedIndentIds) {
      const indent = indents.find(item => item.id === indentId);
      if (!indent || indent._rowIndex === undefined) {
        errorMessages.push(`Could not find data for indent ${indentId}.`);
        continue;
      }

      try {
        const timestamp = new Date().toLocaleString("en-GB", {
          day: "2-digit", month: "2-digit", year: "numeric",
          hour: "2-digit", minute: "2-digit", second: "2-digit",
          hour12: false
        }).replace(",", "");

        const userRemark = remarks[indent.id] || "";
        const finalRemark = userRemark.trim() !== "" ? userRemark.trim() : "ok";
        
        // Column indices (0-based) for INDENT-PO sheet
        const COL_ACTUAL1_TIMESTAMP = 12;      // Column M
        const COL_APPROVED_QTY_SUBMIT = 14;  // Column O
        const COL_APPROVAL_STATUS = 15;      // Column P
        const COL_REMARKS = 16;              // Column Q

        // Construct the object of cells to update
        const cellUpdates = {
          [`col${COL_ACTUAL1_TIMESTAMP + 1}`]: timestamp,
          [`col${COL_APPROVED_QTY_SUBMIT + 1}`]: approvedQtys[indent.id] || indent.quantity,
          [`col${COL_APPROVAL_STATUS + 1}`]: approvalStatuses[indent.id],
          [`col${COL_REMARKS + 1}`]: finalRemark
        };
        
        const payload = new URLSearchParams({
          sheetName: sheetName,
          action: "updateCells",
          rowIndex: indent._rowIndex.toString(),
          cellUpdates: JSON.stringify(cellUpdates),
        });

        const response = await fetch(scriptUrl, {
          method: "POST",
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: payload.toString(),
        });
        
        const responseText = await response.text();

        // Robust response check
        if (!response.ok && !responseText.toLowerCase().includes("success")) {
          throw new Error(`Server returned error ${response.status}: ${responseText}`);
        }
        
        // Some scripts might return a JSON object, so we try to parse it
        try {
            const result = JSON.parse(responseText);
            if (result.status === 'error' || result.success === false) {
                throw new Error(result.message || 'The script reported a failure.');
            }
        } catch (e) {
            // Response was not JSON, but it didn't contain "error", so we assume success based on the check above.
        }
        
        successCount++;

      } catch (err) {
        errorMessages.push(`Failed to update ${indentId}: ${err.message}`);
        console.error(`Failed to update indent ${indentId}:`, err);
      }
    }

    if (errorMessages.length > 0) {
      toast.error(`Submission finished with ${errorMessages.length} error(s).`, {
        id: "submission-toast",
        description: `${successCount} succeeded. See console for error details.`,
      });
    } else {
      toast.success("Submission Complete!", {
        id: "submission-toast",
        description: `${successCount} indent(s) were updated successfully.`,
      });
    }

    // Refresh data after all operations are complete
    setTimeout(() => {
      setRefreshData(prev => !prev);
      setSelectedRows({});
      setIsSubmitting(false);
    }, 1500);
  }

  // --- Memoized Indent Data (Approve & History tabs) ---
  const pendingIndents = useMemo(() => {
    const filtered = indents.filter((indent) => indent.columnL_Check && !indent.columnM_Check)
    return applyFilters(filtered)
  }, [indents, applyFilters])

  const processedIndents = useMemo(() => {
    const filtered = indents.filter((indent) => indent.columnL_Check && indent.columnM_Check)
    return applyFilters(filtered).sort((a, b) => {
      const dateA = parseCustomTimestamp(a.columnM_Check)
      const dateB = parseCustomTimestamp(b.columnM_Check)
      if (!dateA && !dateB) return 0
      if (!dateA) return 1
      if (!dateB) return -1
      return dateB.getTime() - dateA.getTime()
    })
  }, [indents, applyFilters])

  const getApproveTableColumns = useMemo(() => {
    return allColumnsMeta
      .filter((col) => (col.dataKey !== "selectRow" && visibleApproveColumns[col.dataKey]) || col.isApproveUI)
      .sort((a, b) => {
        const order = [
          "selectRow",
          "statusDropdown",
          "remarkInput",
          "approvedQtyInput",
          "col1",
          "col9",
          "col3",
          "col4",
          "col5",
          "col6",
          "col8",
          "col7",
          "col10",
          "col11",
        ]
        const indexA = order.indexOf(a.dataKey)
        const indexB = order.indexOf(b.dataKey)
        return (indexA === -1 ? 999 : indexA) - (indexB === -1 ? 999 : indexB)
      })
  }, [allColumnsMeta, visibleApproveColumns])

  const getHistoryTableColumns = useMemo(() => {
    const explicitHistoryColumns = [
      { dataKey: "col1", header: "Rl-Indent No." },
      { dataKey: "col15", header: "Approval Status" },
      { dataKey: "col16", header: "Remark" },
      { dataKey: "col14", header: "Appr. Qty" },
      { dataKey: "col12", header: "Approval Time" },
      { dataKey: "col9", header: "Delivery Order No." },
      { dataKey: "col3", header: "Generated By" },
      { dataKey: "col4", header: "Vendor Name" },
      { dataKey: "col5", header: "Raw Material Name" },
      { dataKey: "col6", header: "Quantity" },
      { dataKey: "col8", header: "Type Of Indent" },
      { dataKey: "col7", header: "Current Stock As Per factory" },
      { dataKey: "col10", header: "Notes" },
      { dataKey: "col11", header: "Planned 1" },
    ]
    return explicitHistoryColumns
      .filter((col) => visibleHistoryColumns[col.dataKey])
      .filter((col) => {
        const key = col.dataKey
        return processedIndents.some(
          (indent) => indent[key] !== undefined && indent[key] !== null && String(indent[key]).trim() !== "",
        )
      })
  }, [visibleHistoryColumns, processedIndents])

  return (
    <Card className="w-full max-w-full 2xl:max-w-screen-2xl mx-auto relative bg-white shadow-md rounded-lg border border-gray-200">
      <CardHeader className="p-4 border-b border-gray-200">
        <CardTitle className="flex items-center gap-2 text-gray-800 text-lg">
          <Shield className="h-5 w-5 text-purple-600" />
          Stock Approval Management
        </CardTitle>
        <CardDescription className="text-gray-500 text-sm">
          Review and manage raw material indent approvals.
        </CardDescription>
        {user?.firmName && user.firmName.toLowerCase() !== "all" && (
          <p className="text-purple-600 text-xs mt-1">
            Showing data for: <span className="font-semibold">{user.firmName}</span>
          </p>
        )}
      </CardHeader>

      <CardContent className="p-4">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid grid-cols-2 max-w-sm mb-4">
            <TabsTrigger value="approve" className="flex items-center gap-2">
              <CheckCircle2 className="h-4 w-4" />
              Approve
              <Badge variant="secondary" className="ml-1 px-1.5 py-0.5 text-xs">
                {pendingIndents.length}
              </Badge>
            </TabsTrigger>
            <TabsTrigger value="history" className="flex items-center gap-2">
              <History className="h-4 w-4" />
              History
              <Badge variant="secondary" className="ml-1 px-1.5 py-0.5 text-xs">
                {processedIndents.length}
              </Badge>
            </TabsTrigger>
          </TabsList>

          {/* Filters Section */}
          <div className="mb-4 p-4 border border-gray-200 rounded-lg">
            <div className="flex items-center gap-2 mb-3">
              <Filter className="h-4 w-4 text-gray-500" />
              <Label className="text-sm font-medium">Filters</Label>
              <Button variant="outline" size="sm" onClick={clearAllFilters} className="ml-auto bg-white">
                Clear All
              </Button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
              <Select
                size="sm"
                value={filters.vendorName}
                onValueChange={(value) => handleFilterChange("vendorName", value)}
              >
                <SelectTrigger className="h-9 bg-white">
                  <SelectValue placeholder="All Vendors" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Vendors</SelectItem>
                  {uniqueValues.vendorName.map((vendor) => (
                    <SelectItem key={vendor} value={vendor}>
                      {vendor}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Select
                size="sm"
                value={filters.rawMaterialName}
                onValueChange={(value) => handleFilterChange("rawMaterialName", value)}
              >
                <SelectTrigger className="h-9 bg-white">
                  <SelectValue placeholder="All Materials" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Materials</SelectItem>
                  {uniqueValues.rawMaterialName.map((material) => (
                    <SelectItem key={material} value={material}>
                      {material}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Select
                size="sm"
                value={filters.typeOfIndent}
                onValueChange={(value) => handleFilterChange("typeOfIndent", value)}
              >
                <SelectTrigger className="h-9 bg-white">
                  <SelectValue placeholder="All Types" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Types</SelectItem>
                  {uniqueValues.typeOfIndent.map((type) => (
                    <SelectItem key={type} value={type}>
                      {type}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Select
                size="sm"
                value={filters.generatedBy}
                onValueChange={(value) => handleFilterChange("generatedBy", value)}
              >
                <SelectTrigger className="h-9 bg-white">
                  <SelectValue placeholder="All Users" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Users</SelectItem>
                  {uniqueValues.generatedBy.map((user) => (
                    <SelectItem key={user} value={user}>
                      {user}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Select
                size="sm"
                value={filters.deliveryOrderNo}
                onValueChange={(value) => handleFilterChange("deliveryOrderNo", value)}
              >
                <SelectTrigger className="h-9 bg-white">
                  <SelectValue placeholder="All Orders" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Orders</SelectItem>
                  {uniqueValues.deliveryOrderNo.map((order) => (
                    <SelectItem key={order} value={order}>
                      {order}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {/* Approve Tab Content */}
          <TabsContent value="approve" className="mt-4">
            <div className="bg-white rounded-lg overflow-hidden shadow-sm border border-gray-200">
              <div className="p-4 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-purple-100 rounded-full">
                      <CheckCircle2 className="h-4 w-4 text-purple-600" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-base text-gray-800">Pending Stock Approval</h3>
                      <p className="text-xs text-gray-500">Review and approve/reject based on stock verification.</p>
                    </div>
                  </div>
                  {pendingIndents.length > 0 && (
                    <Button
                      onClick={handleSubmitSelected}
                      disabled={Object.values(selectedRows).filter(Boolean).length === 0 || isSubmitting}
                      className="px-3 py-1 h-8 bg-purple-600 text-white font-semibold rounded-md hover:bg-purple-700 transition-colors disabled:opacity-50 text-sm"
                    >
                      {isSubmitting ? (
                        <>
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                          Submitting...
                        </>
                      ) : (
                        "Submit Selected"
                      )}
                    </Button>
                  )}
                </div>
              </div>

              <div className="p-4">
                {loading ? (
                  <div className="flex justify-center items-center h-40">
                    <Loader2 className="h-8 w-8 text-purple-500 animate-spin mr-3" />
                    <p className="text-gray-700">Loading pending indents...</p>
                  </div>
                ) : error ? (
                  <div className="text-center p-6 bg-red-50 rounded-md">
                    <AlertTriangle className="h-10 w-10 text-red-500 mx-auto mb-3" />
                    <h3 className="text-red-700 font-semibold">Error Loading Data</h3>
                    <p className="text-red-600 text-sm mb-3">{error}</p>
                    <Button
                      onClick={() => setRefreshData((p) => !p)}
                      className="px-4 py-1.5 bg-red-600 text-white rounded-md hover:bg-red-700 text-sm"
                    >
                      Try Again
                    </Button>
                  </div>
                ) : (
                  <>
                    {/* Column Visibility Controls for Pending Indents */}
                    <div className="mb-4 flex justify-end">
                      <Popover>
                        <PopoverTrigger asChild>
                          <Button variant="outline" className="ml-auto bg-white h-8 px-3 text-sm">
                            <MixerHorizontalIcon className="mr-2 h-4 w-4" />
                            View Columns
                          </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-[200px] p-4">
                          <div className="grid gap-2">
                            <p className="text-sm font-medium leading-none">Toggle Columns</p>
                            <p className="text-xs text-gray-500">Select columns to display.</p>
                            <div className="relative flex items-center mb-2">
                              <Button
                                variant="link"
                                size="sm"
                                onClick={() =>
                                  handleSelectAllColumns(
                                    "approve",
                                    allColumnsMeta.filter((col) => col.toggleable && !col.isApproveUI),
                                    true,
                                  )
                                }
                                className="p-0 h-auto text-xs"
                              >
                                Select All
                              </Button>
                              <span className="text-gray-400 text-xs mx-1">|</span>
                              <Button
                                variant="link"
                                size="sm"
                                onClick={() =>
                                  handleSelectAllColumns(
                                    "approve",
                                    allColumnsMeta.filter((col) => col.toggleable && !col.isApproveUI),
                                    false,
                                  )
                                }
                                className="p-0 h-auto text-xs"
                              >
                                Deselect All
                              </Button>
                            </div>
                            <div className="space-y-2">
                              {allColumnsMeta
                                .filter((col) => col.toggleable && !col.isApproveUI)
                                .map((col) => (
                                  <div key={col.dataKey} className="flex items-center space-x-2">
                                    <Checkbox
                                      id={`toggle-approve-${col.dataKey}`}
                                      checked={visibleApproveColumns[col.dataKey]}
                                      onCheckedChange={(checked) => handleToggleColumn("approve", col.dataKey, checked)}
                                      disabled={col.alwaysVisible}
                                    />
                                    <Label
                                      htmlFor={`toggle-approve-${col.dataKey}`}
                                      className="text-sm font-normal cursor-pointer"
                                    >
                                      {col.header}
                                      {col.alwaysVisible && <span className="text-gray-400 ml-1 text-xs">(Fixed)</span>}
                                    </Label>
                                  </div>
                                ))}
                            </div>
                          </div>
                        </PopoverContent>
                      </Popover>
                    </div>

                    {pendingIndents.length === 0 ? (
                      <div className="text-center py-10">
                        <Info className="h-12 w-12 text-purple-500 mx-auto mb-3" />
                        <p className="text-gray-600">No indents currently pending approval.</p>
                      </div>
                    ) : (
                      <div className="overflow-x-auto rounded-lg border border-gray-200 max-h-[calc(100vh-500px)]">
                        <Table className="w-full text-sm">
                          <TableHeader className="bg-gray-100 sticky top-0 z-10">
                            <TableRow>
                              {getApproveTableColumns.map((col) => (
                                <TableHead
                                  key={col.dataKey}
                                  className="px-4 py-2 text-left text-xs font-medium text-gray-600 uppercase tracking-wider whitespace-nowrap"
                                >
                                  {col.header}
                                </TableHead>
                              ))}
                            </TableRow>
                          </TableHeader>
                          <TableBody className="bg-white divide-y divide-gray-200">
                            {pendingIndents.map((indent) => (
                              <TableRow
                                key={indent._id}
                                className={`transition duration-150 ${
                                  selectedRows[indent.id] ? "bg-purple-100" : "hover:bg-gray-50"
                                }`}
                              >
                                {getApproveTableColumns.map((col) => {
                                  if (col.dataKey === "selectRow") {
                                    return (
                                      <TableCell key={col.dataKey} className="px-4 py-1.5">
                                        <Checkbox
                                          checked={!!selectedRows[indent.id]}
                                          onCheckedChange={(checked) => handleSelectRow(indent.id, checked)}
                                          className="h-4 w-4"
                                        />
                                      </TableCell>
                                    )
                                  }
                                  if (col.dataKey === "approvedQtyInput") {
                                    return (
                                      <TableCell key={col.dataKey} className="px-4 py-1.5">
                                        <input
                                          type="number"
                                          placeholder="Qty"
                                          value={approvedQtys[indent.id] || ""}
                                          onChange={(e) => handleApprovedQtyChange(indent.id, e.target.value)}
                                          disabled={!selectedRows[indent.id]}
                                          className="w-24 px-2 py-1 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 disabled:bg-gray-100 text-sm"
                                        />
                                      </TableCell>
                                    )
                                  }
                                  if (col.dataKey === "statusDropdown") {
                                    return (
                                      <TableCell key={col.dataKey} className="px-4 py-1.5">
                                        <select
                                          value={approvalStatuses[indent.id] || "Select"}
                                          onChange={(e) => handleApprovalStatusChange(indent.id, e.target.value)}
                                          disabled={!selectedRows[indent.id]}
                                          className="w-full px-2 py-1 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 disabled:bg-gray-100 text-sm"
                                        >
                                          <option value="Select" disabled>
                                            Select...
                                          </option>
                                          <option value="Approve">Approve</option>
                                          <option value="Reject">Reject</option>
                                        </select>
                                      </TableCell>
                                    )
                                  }
                                  if (col.dataKey === "remarkInput") {
                                    return (
                                      <TableCell key={col.dataKey} className="px-4 py-1.5">
                                        <input
                                          type="text"
                                          placeholder="Remark"
                                          value={remarks[indent.id] || ""}
                                          onChange={(e) => handleRemarkChange(indent.id, e.target.value)}
                                          disabled={!selectedRows[indent.id]}
                                          className="w-full px-2 py-1 border border-gray-300 rounded-md focus:ring-purple-500 focus:border-purple-500 disabled:bg-gray-100 text-sm"
                                        />
                                      </TableCell>
                                    )
                                  }
                                  return (
                                    <TableCell key={col.dataKey} className="px-4 py-1.5">
                                      {col.dataKey === "col11" ? indent.columnL_Check : indent[col.dataKey]}
                                    </TableCell>
                                  )
                                })}
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </div>
                    )}
                  </>
                )}
              </div>
            </div>
          </TabsContent>

          {/* History Tab Content */}
          <TabsContent value="history" className="mt-4">
            <div className="bg-white rounded-lg overflow-hidden shadow-sm border border-gray-200">
              <div className="p-4 border-b border-gray-200">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-purple-100 rounded-full">
                    <History className="h-4 w-4 text-purple-600" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-base text-gray-800">Approval History</h3>
                    <p className="text-xs text-gray-500">View past approvals and rejections.</p>
                  </div>
                </div>
              </div>

              <div className="p-4">
                {loading ? (
                  <div className="flex justify-center items-center h-40">
                    <Loader2 className="h-8 w-8 text-purple-500 animate-spin mr-3" />
                    <p className="text-gray-700">Loading approval history...</p>
                  </div>
                ) : error ? (
                  <div className="text-center p-6 bg-red-50 rounded-md">
                    <AlertTriangle className="h-10 w-10 text-red-500 mx-auto mb-3" />
                    <h3 className="text-red-700 font-semibold">Error Loading Data</h3>
                    <p className="text-red-600 text-sm mb-3">{error}</p>
                    <Button
                      onClick={() => setRefreshData((p) => !p)}
                      className="px-4 py-1.5 bg-red-600 text-white rounded-md hover:bg-red-700 text-sm"
                    >
                      Try Again
                    </Button>
                  </div>
                ) : (
                  <>
                    {/* Column Visibility Controls for History */}
                    <div className="mb-4 flex justify-end">
                      <Popover>
                        <PopoverTrigger asChild>
                          <Button variant="outline" className="ml-auto bg-white h-8 px-3 text-sm">
                            <MixerHorizontalIcon className="mr-2 h-4 w-4" />
                            View Columns
                          </Button>
                        </PopoverTrigger>
                        <PopoverContent className="w-[200px] p-4">
                          <div className="grid gap-2">
                            <p className="text-sm font-medium leading-none">Toggle Columns</p>
                            <p className="text-xs text-gray-500">Select columns to display.</p>
                            <div className="relative flex items-center mb-2">
                              <Button
                                variant="link"
                                size="sm"
                                onClick={() =>
                                  handleSelectAllColumns(
                                    "history",
                                    allColumnsMeta.filter((col) => col.toggleable && !col.isHistoryUI),
                                    true,
                                  )
                                }
                                className="p-0 h-auto text-xs"
                              >
                                Select All
                              </Button>
                              <span className="text-gray-400 text-xs mx-1">|</span>
                              <Button
                                variant="link"
                                size="sm"
                                onClick={() =>
                                  handleSelectAllColumns(
                                    "history",
                                    allColumnsMeta.filter((col) => col.toggleable && !col.isHistoryUI),
                                    false,
                                  )
                                }
                                className="p-0 h-auto text-xs"
                              >
                                Deselect All
                              </Button>
                            </div>
                            <div className="space-y-2">
                              {allColumnsMeta
                                .filter((col) => col.toggleable && !col.isHistoryUI)
                                .map((col) => (
                                  <div key={col.dataKey} className="flex items-center space-x-2">
                                    <Checkbox
                                      id={`toggle-history-${col.dataKey}`}
                                      checked={visibleHistoryColumns[col.dataKey]}
                                      onCheckedChange={(checked) => handleToggleColumn("history", col.dataKey, checked)}
                                      disabled={col.alwaysVisible}
                                    />
                                    <Label
                                      htmlFor={`toggle-history-${col.dataKey}`}
                                      className="text-sm font-normal cursor-pointer"
                                    >
                                      {col.header}
                                      {col.alwaysVisible && <span className="text-gray-400 ml-1 text-xs">(Fixed)</span>}
                                    </Label>
                                  </div>
                                ))}
                            </div>
                          </div>
                        </PopoverContent>
                      </Popover>
                    </div>

                    {processedIndents.length === 0 ? (
                      <div className="text-center py-10">
                        <Info className="h-12 w-12 text-purple-500 mx-auto mb-3" />
                        <p className="text-gray-600">No approval history available.</p>
                      </div>
                    ) : (
                      <div className="overflow-x-auto rounded-lg border border-gray-200 max-h-[calc(100vh-500px)]">
                        <Table className="w-full text-sm">
                          <TableHeader className="bg-gray-100 sticky top-0 z-10">
                            <TableRow>
                              {getHistoryTableColumns.map((col) => (
                                <TableHead
                                  key={col.dataKey}
                                  className="px-4 py-2 text-left text-xs font-medium text-gray-600 uppercase tracking-wider whitespace-nowrap"
                                >
                                  {col.header}
                                </TableHead>
                              ))}
                            </TableRow>
                          </TableHeader>
                          <TableBody className="bg-white divide-y divide-gray-200">
                            {processedIndents.map((indent) => (
                              <TableRow key={indent._id} className="hover:bg-gray-50">
                                {getHistoryTableColumns.map((col) => (
                                  <TableCell key={col.dataKey} className="px-4 py-1.5">
                                    {col.dataKey === "col12"
                                      ? indent.columnM_Check
                                      : col.dataKey === "col11"
                                        ? indent.columnL_Check
                                        : col.dataKey === "col16"
                                          ? cleanRemark(indent[col.dataKey]) // Clean remarks in history too
                                          : indent[col.dataKey]}
                                  </TableCell>
                                ))}
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </div>
                    )}
                  </>
                )}
              </div>
            </div>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  )
}